classdef ButcherTableau
    properties (Access = private, Constant)
        % Euler's method
        Euler = struct('a', 0, ...
            'b', 1, ...
            'c', 0);
        % Explicit midpoint method
        ExpMidpoint = struct('a', [0 0; 1/2 0], ...
            'b', [0 1], ...
            'c', [0 1/2]);
        % Heun's method
        Heun2 = struct('a', [0 0; 1 0], ...
            'b', [1/2 1/2], ...
            'c', [0 1]);
        % Ralston's method (second-order)
        Ralston2 = struct('a', [0 0; 2/3 0], ...
            'b', [1/4 3/4], ...
            'c', [0 2/3]);
        % Kutta's third-order method
        Kutta3 = struct('a', [0 0 0; 1/2 0 0; -1 2 0], ...
            'b', [1/6 2/3 1/6], ...
            'c', [0 1/2 1]);
        % Heun's third-order method
        Heun3 = struct('a', [0 0 0; 1/3 0 0; 0 2/3 0], ...
            'b', [1/4 0 3/4], ...
            'c', [0 1/3 2/3]);
        % Van der Houwen's/Wray third-order method
        VanDerHouwenWray = struct('a', [0 0 0; 8/15 0 0; 1/4 5/12 0], ...
            'b', [1/4 0 3/4], ...
            'c', [0 8/15 2/3]);
        % Ralston's third-order method
        Ralston3 = struct('a', [0 0 0; 1/2 0 0; 0 3/4 0], ...
            'b', [2/9 1/3 4/9], ...
            'c', [0 1/2 3/4]);
        % Third-order Strong Stability Preserving Runge-Kutta
        SSPRK3 = struct('a', [0 0 0; 1 0 0; 1/4 1/4 0], ...
            'b', [1/6 1/6 2/3], ...
            'c', [0 1 1/2]);
        % Ralston's fourth-order method
        Ralston4 = struct('a', [0 0 0 0; 2/5 0 0 0; ...
            (-2889+1428*sqrt(5))/1024 (3785-1620*sqrt(5))/1024 0 0; ...
            (-3365+2094*sqrt(5))/6040 (-975-3046*sqrt(5))/2552 (467040+203968&sqrt(5))/240845 0;], ...
            'b', [(263+24*sqrt(5))/1812 (125-1000*sqrt(5))/3828 (3426304+1661952*sqrt(5))/5924787 (30-4*sqrt(5))/123], ...
            'c', [0 2/5 (14-3*sqrt(5))/16 1]);
        % Runge-Kutta fourth-order
        RK4 = struct('a', [0 0 0 0 0 0 0; ...
            1/3 0 0 0 0 0 0; ...
            0 2/3 0 0 0 0 0; ...
            1/12 1/3 -1/12 0 0 0 0; ...
            -1/16 9/8 -3/16 -3/8 0 0 0; ...
            0 9/8 -3/8 -3/4 1/2 0 0; ...
            9/44 -9/11 63/44 18/11 0 -16/11 0], ...
            'b', [11/120 0 27/40 27/40 -4/15 -4/15 11/120], ...
            'c', [0 1/3 2/3 1/3 1/2 1/2 1]);
        % Runge-Kutta sixth-order
        RK6 = struct('a', [0 0 0 0; 1/2 0 0 0; 0 1/2 0 0; 0 0 1 0], ...
            'b', [1/6 1/3 1/3 1/6], ...
            'c', [0 1/2 1/2 1]);
        % 3/8 rule
        Rule3_8 = struct('a', [0 0 0 0; 1/3 0 0 0; -1/3 1 0 0; 1 -1 1 0], ...
            'b', [1/8 3/8 3/8 1/8], ...
            'c', [0 1/3 2/3 1]);
        % Fehlberg
        RKF1 = struct('a', [0 0 0; 1/2 0 0; 1/256 255/256 0], ...
            'b', [1/256 255/256 0], ...
            'c', [0 1/2 1]);
        RKF2 = struct('a', [0 0 0; 1/2 0 0; 1/256 255/256 0], ...
            'b', [1/512 255/256 1/512], ...
            'c', [0 1/2 1]);
        RKF4 = struct('a', [0 0 0 0 0 0; 1/4 0 0 0 0 0; 3/32 9/32 0 0 0 0; ...
            1932/2197 -7200/2197 7296/2197 0 0 0; ...
            439/216 -8 3680/513 -845/4104 0 0; ...
            -8/27 2 -3544/2565 1859/4104 -11/40 0], ...
            'b', [25/216 0 1408/2565 2197/4104 -1/5 0], ...
            'c', [0 1/4 3/8 12/13 1 1/2]);
        RKF5 = struct('a', [0 0 0 0 0 0; 1/4 0 0 0 0 0; 3/32 9/32 0 0 0 0; ...
            1932/2197 -7200/2197 7296/2197 0 0 0; ...
            439/216 -8 3680/513 -845/4104 0 0; ...
            -8/27 2 -3544/2565 1859/4104 -11/40 0], ...
            'b', [16/135 0 6656/12825 28561/56430 -9/50 2/55], ...
            'c', [0 1/4 3/8 12/13 1 1/2]);
        %CashKarp
        CashKarp4 = struct('a', [0 0 0 0 0 0; 1/5 0 0 0 0 0; 3/40 9/40 0 0 0 0; ...
            3/10 -9/10 6/5 0 0 0; ...
            -11/54 5/2 -70/27 35/27 0 0; ...
            1631/55296 175/512 575/13824 44275/110592 253/4096 0], ...
            'b', [2825/27648 0 18575/48384 13525/55296 277/14336 1/4], ...
            'c', [0 1/5 3/10 3/5 1 7/8]);
        CashKarp5 = struct('a', [0 0 0 0 0 0; 1/5 0 0 0 0 0; 3/40 9/40 0 0 0 0; ...
            3/10 -9/10 6/5 0 0 0; ...
            -11/54 5/2 -70/27 35/27 0 0; ...
            1631/55296 175/512 575/13824 44275/110592 253/4096 0], ...
            'b', [37/378 0 250/621 125/594 0 512/1771], ...
            'c', [0 1/5 3/10 3/5 1 7/8]);
        %DOPRI
        DOPRI5 = struct('a', [0 0 0 0 0 0 0; 1/5 0 0 0 0 0 0; ...
            3/40 9/40 0 0 0 0 0; ...
            44/45	-56/15 32/9 0 0 0 0; ...
            19372/6561 -25360/2187 64448/6561 -212/729 0 0 0; ...
            9017/3168	-355/33	46732/5247	49/176	-5103/18656 0 0; ...
            35/384 0 500/1113 125/192 -2187/6784 11/84 0], ...
            'b', [35/384 0 500/1113 125/192 -2187/6784 11/84 0], ...
            'c', [0 1/5 3/10 4/5 8/9 1 1]);
        DOPRI4 = struct('a', [0 0 0 0 0 0 0; 1/5 0 0 0 0 0 0; ...
            3/40 9/40 0 0 0 0 0; ...
            44/45	-56/15 32/9 0 0 0 0; ...
            19372/6561 -25360/2187 64448/6561 -212/729 0 0 0; ...
            9017/3168	-355/33	46732/5247	49/176	-5103/18656 0 0; ...
            35/384 0 500/1113 125/192 -2187/6784 11/84 0], ...
            'b', [5179/57600 0 7571/16695 393/640 -92097/339200 187/2100 1/40], ...
            'c', [0 1/5 3/10 4/5 8/9 1 1]);
        % Gill's
        Gill = struct('a', [0 0 0 0; 1/2 0 0 0; sqrt(2)/2 (2-sqrt(2))/2 0 0; ...
            0 -sqrt(2)/2 (2+sqrt(2))/2 0], ...
            'b', [1/6 (1-sqrt(2)/2)/3 (1+sqrt(2)/2)/3 1/6], ...
            'c', [0 1/2 1/2 1]);

        % Backwards Euler's method
        BEuler = struct('a', 1, ...
            'b', 1, ...
            'c', 1);
        ImplicitMidpoint = struct('a', 1/2, ...
            'b', 1, ...
            'c', 1/2);
        CrankNicolson = struct('a', [0 0; 1/2 1/2], ...
            'b', [1/2 1/2], ...
            'c', [0 1]);
        KraijevangerSpijker = struct('a', [1/2 0; -1/2 2], ...
            'b', [-1/2 3/2], ...
            'c', [1/2 3/2]);
        QinZhang = struct('a', [1/4 0; 1/2 1/4], ...
            'b', [1/2 1/2], ...
            'c', [1/4 3/4]);
        Crouzeix3 = struct('a', [1/2+sqrt(3)/6 0; -sqrt(3)/3 1/2+sqrt(3)/6], ...
            'b', [1/2 1/2], ...
            'c', [1/2+sqrt(3)/6 1/2-sqrt(3)/6]);
        Crouzeix4 = struct('a', [(1+(2/sqrt(3)*cos(pi/18)))/2 0 0; -(2/sqrt(3)*cos(pi/18))/2 (1+(2/sqrt(3)*cos(pi/18)))/2 0; 1+(2/sqrt(3)*cos(pi/18)) -(1+2*(2/sqrt(3)*cos(pi/18))) (1+(2/sqrt(3)*cos(pi/18))/2)], ...
            'b', [1/(6*(2/sqrt(3)*cos(pi/18))^2) 1-1/(3*(2/sqrt(3)*cos(pi/18))^2) 1/(6*(2/sqrt(3)*cos(pi/18))^2)], ...
            'c', [(1+(2/sqrt(3)*cos(pi/18)))/2 1/2 (1-(2/sqrt(3)*cos(pi/18)))/2]);
        LStableRK3 = struct('a', [1/2 0 0 0; 1/6 1/2 0 0; -1/2 1/2 1/2 0; ...
            3/2 -3/2 1/2 1/2], ...
            'b', [3/2 -3/2 1/2 1/2], ...
            'c', [1/2 2/3 1/2 1]);
        Butcher4 = struct('a', [0 0 0; 1/4 1/4 0; 0 1 0], ...
            'b', [1/6 2/3 1/6], ...
            'c', [0 1/2 1]);
        TrapezoidalRule = struct('a', [0 0; 1/2 1/2], ...
            'b', [1/2 1/2], ...
            'c', [0; 1]);
        GaussLegendre = struct('a', [1/4, 1/4 - sqrt(3)/6, 1/4 + sqrt(3)/6, 0;
            1/4 + sqrt(3)/6, 1/4, 0, 1/4 - sqrt(3)/6;
            1/4, 1/4 + sqrt(3)/6, 1/4, 1/4 - sqrt(3)/6;
            1/4 + sqrt(3)/6, 1/4, 1/4, 1/4 - sqrt(3)/6], ...
            'b', [1/4, 1/4, 1/4, 1/4], ...
            'c', [1/2 - sqrt(3)/6; 1/2 + sqrt(3)/6; 1; 1]);
        RadauIIA = struct('a', [5/12, -1/12, 1/12;
            3/4, 1/4, 1/4;
            1/4, 1/4, 3/4], ...
            'b', [1/4, 1/4, 1/4], ...
            'c', [1/3; 1; 1]);
    end

    methods (Access = public, Static)
        function [a, b, c] = get(methodName)
            arguments
                methodName {mustBeMember(methodName, {'Euler', 'ExpMidpoint', 'Heun2', 'Ralston2', 'Kutta3', 'Heun3', ...
                    'VanDerHouwenWray', 'Ralston3', 'SSPRK3', 'Ralston4', 'RK4', 'Rule3_8', ...
                    'RKF1', 'RKF2', 'RKF4', 'RKF5', 'CashKarp4', 'CashKarp5', ...
                    'DOPRI4', 'DOPRI5','BEuler', 'ImplicitMidpoint', ...
                    'CrankNicolson', 'KraijevangerSpijker', 'QinZhang', ...
                    'Crouzeix3', 'Crouzeix4', 'LStableRK3', 'Butcher4', 'Gill', 'RK6', 'TrapezoidalRule', 'GaussLegendre', ...
                    'RadauIIA'})}
            end

            tableau = eval(sprintf('ButcherTableau.%s', methodName));
            a = tableau.a;
            b = tableau.b;
            c = tableau.c;
        end

        function methods = listMethods()
            % List all available methods
            methods = {'Euler', 'ExpMidpoint', 'Heun2', 'Ralston2', 'Kutta3', 'Heun3', ...
                'VanDerHouwenWray', 'Ralston3', 'SSPRK3', 'Ralston4', 'RK4', 'Rule3_8', ...
                'RKF1', 'RKF2', 'RKF4', 'RKF5', 'CashKarp4', 'CashKarp5', ...
                'DOPRI4', 'DOPRI5','BEuler', 'ImplicitMidpoint', ...
                'CrankNicolson', 'KraijevangerSpijker', 'QinZhang', ...
                'Crouzeix3', 'Crouzeix4', 'LStableRK3', 'Butcher4', 'Gill', 'RK6', 'TrapezoidalRule', 'GaussLegendre', ...
                'RadauIIA'};
        end
    end
end
